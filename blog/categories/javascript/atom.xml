<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | thefourtheye's weblog]]></title>
  <link href="http://thefourtheye.in/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://thefourtheye.in/"/>
  <updated>2017-03-09T22:23:15+05:30</updated>
  <id>http://thefourtheye.in/</id>
  <author>
    <name><![CDATA[Sakthipriyan Vairamani (thefourtheye)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Lookbehind RegEx Alternative]]></title>
    <link href="http://thefourtheye.in/2017/02/21/javascript-lookbehind-regex-alternative/"/>
    <updated>2017-02-21T21:33:13+05:30</updated>
    <id>http://thefourtheye.in/2017/02/21/javascript-lookbehind-regex-alternative</id>
    <content type="html"><![CDATA[<p>Recently one of my colleagues came to me with a problem. He had a string which looked like JSON but not a valid JSON string. For example,</p>

<pre><code class="language-js">[{\"name\":\"Kilua\"\\,\"age\":35}],{\"city\":\"SJC\"},\"US\"
</code></pre>

<p>and they wanted to split the string at all the commas, except when they are preceded by a backslash. That means, they wanted</p>

<pre><code class="language-js">[ '[{"name":"Kilua"\\,"age":35}]', '{"city":"SJC"},"US"' ]
</code></pre>

<p>as output. If the requirement was to split the string at commas followed by a certain string, then it would have been pretty straight forward. For example, if the string is <code>a,1,b,2,c,3</code> and if they wanted to split the string at all commas except when they are not followed by numbers, then the solution would have been very simple, with negative lookahead, like this</p>

<pre><code class="language-js">console.log('a,1,b,2,c,3'.split(/,(?!\d)/));
// [ 'a,1', 'b,2', 'c,3' ]
</code></pre>

<p>Since JavaScript doesn’t have lookbehinds, we don’t have a straight forward solution to this problem. When I searched Stackoverflow, I found this solution</p>

<p><code>js WTK's answer in Stackoverflow http://stackoverflow.com/a/7330150/1903116
'a\\,bcde,fgh,ijk\\,lmno,pqrst\\,uv'.replace(/([^\\]),/g, '$1\u000B').split('\u000B')
</code></p>

<p>This solves the exact same problem which my colleague was facing. It compensates the absence of lookbehinds by breaking down the problem in two steps.</p>

<ol>
  <li>Replace all the commas matching the condition with a marker string which does not appear anywhere in the string. (<code>\u000B</code> in this case)</li>
  <li>Then split the original string with the marker string.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS Quirks: Stringified Numbers]]></title>
    <link href="http://thefourtheye.in/2016/11/15/js-quirks-stringified-numbers/"/>
    <updated>2016-11-15T00:38:30+05:30</updated>
    <id>http://thefourtheye.in/2016/11/15/js-quirks-stringified-numbers</id>
    <content type="html"><![CDATA[<p>When I was working on <a href="https://github.com/nodejs/node/pull/9492">Node.js PR 9492</a>, <a href="https://github.com/nodejs/node/pull/9492#discussion_r86987446">this comment</a></p>

<blockquote>
  <p>This should probably test for a wider range of values. <code>test/parallel/test-net-internal.js</code> has some good examples.</p>
</blockquote>

<p>made me look at <a href="https://github.com/nodejs/node/blob/fc44bd4d0b984f7b926b8c92b8e9a88da1c08921/test/parallel/test-net-internal.js">that file</a>. As I was going through the test, few of the bad values were interesting. I normally test with stringified positive decimal numbers and negative decimal numbers. But I saw stringified negative octal, binary, and hexa decimal numbers.</p>

<pre><code class="language-js">const bad = [-1, 'a', {}, [], false, true, 0xFFFF + 1, Infinity,
             -Infinity, NaN, undefined, null, '', ' ', 1.1, '0x',
             '-0x1', '-0o1', '-0b1', '0o', '0b'];
</code></pre>

<p>I got curious as I have never used them before, I just wanted to see their corresponding negative values. So I wrote a program like this</p>

<pre><code class="language-js">[-0x1, '-0x1', -0o1, '-0o1', -0b1, '-0b1'].forEach(item =&gt; console.log(item, +item));
</code></pre>

<p>and I was expecting to see the result</p>

<pre><code class="language-text">-1 -1
-0x1 -1
-1 -1
-0o1 -1
-1 -1
-0b1 -1
</code></pre>

<p>but all I got was</p>

<pre><code class="language-text">-1 -1
-0x1 NaN
-1 -1
-0o1 NaN
-1 -1
-0b1 NaN
</code></pre>

<p>The unary - operator simply negates the magnitude of the numbers. The stringified numbers were not processed in the same way as their number counterparts. So I looked at the ECMAScript specification’s <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber-applied-to-the-string-type">ToNumber Applied to the String Type</a> section (which is actually responsible for converting strings to numbers).</p>

<pre><code class="language-text">StrNumericLiteral :::
    StrDecimalLiteral
    BinaryIntegerLiteral
    OctalIntegerLiteral
    HexIntegerLiteral
...
...
StrDecimalLiteral :::
    StrUnsignedDecimalLiteral
    + StrUnsignedDecimalLiteral
    - StrUnsignedDecimalLiteral
</code></pre>

<p>Only the <code>StrDecimalLiteral</code> production allows signed numbers. If we look at the definition of others in the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-literals-numeric-literals">Numeric Literals</a> section,</p>

<pre><code class="language-text">BinaryIntegerLiteral ::
    0b BinaryDigits
    0B BinaryDigits

BinaryDigits ::
    BinaryDigit
    BinaryDigits BinaryDigit

BinaryDigit :: one of
    0 1

OctalIntegerLiteral ::
    0o OctalDigits
    0O OctalDigits

OctalDigits ::
    OctalDigit
    OctalDigits OctalDigit

OctalDigit :: one of
    0 1 2 3 4 5 6 7

HexIntegerLiteral ::
    0x HexDigits
    0X HexDigits

HexDigits ::
    HexDigit
    HexDigits HexDigit

HexDigit :: one of
    0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F
</code></pre>

<p>So, as per the specification, only the decimal numbers can have signs in the stringified number form. That is why the others are not considered as numbers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sane ECMAScript 6 Generators]]></title>
    <link href="http://thefourtheye.in/2016/02/03/sane-ecmascript-6-generators/"/>
    <updated>2016-02-03T20:47:00+05:30</updated>
    <id>http://thefourtheye.in/2016/02/03/sane-ecmascript-6-generators</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">This post is cross posted in Medium, <a href="https://medium.com/@thefourtheye/sane-ecmascript-6-generators-7d1adcd85536#.cpvn9y4n8">here</a>.<br /><br />I recently found one interesting thing about ES6 Generators. I come from Python background and I understood generators as in Python. So, I expected the following Python code's equivalent ECMAScript 6 code also to work as well. <!--?prettify lang=python linenums=true?--><br /><pre class="prettyprint">&gt;&gt;&gt; numbers = (num for num in range(10))<br />&gt;&gt;&gt; for num in numbers:<br />...   if num == 3:<br />...     break<br />... <br />&gt;&gt;&gt; next(numbers)<br />4<br /></pre>You can find the online demo for this Python program, <a href="http://ideone.com/9lYJOz">here</a>.<br /><br />But then, when I used Babel to transpile the following code and executed it<!--?prettify lang=javascript linenums=true?--><br /><pre class="prettyprint">function* NumberGenerator() {<br />  for (var i = 0; i &lt; 10; i += 1) {<br />    yield i;<br />  }<br />}<br /><br />var numbers = NumberGenerator();<br /><br />for (var num of numbers) {<br />  if (num === 3) {<br />    break;<br />  }<br />}<br /><br />console.log(numbers.next());<br />// {"done":true}<br /></pre>You can find the online demo for this JavaScript program, made with Babel's REPL, <a href="https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=true&amp;code=function*%20NumberGenerator()%20%7B%0A%20%20for%20(var%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%20%2B%3D%201)%20%7B%0A%20%20%20%20yield%20i%3B%0A%20%20%7D%0A%7D%0A%0Avar%20numbers%20%3D%20NumberGenerator()%3B%0A%0Afor%20(var%20num%20of%20numbers)%20%7B%0A%20%20if%20(num%20%3D%3D%3D%203)%20%7B%0A%20%20%20%20break%3B%0A%20%20%7D%0A%7D%0A%0Aconsole.log(numbers.next())%3B%0A">here</a>.  As you see here, when I broke out of the loop, the Generator Object got closed. This was pointed out to me by <a href="http://stackoverflow.com/users/785065/loganfsmyth">Logan Smyth</a> in Babel's Slack discussion. I was really surprised by this behavior and found the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator, lhsKind, labelSet )</a> section in the ECMAScript 6 Specification, which says  <blockquote>If LoopContinues(result, labelSet) is false, return IteratorClose(iterator, UpdateEmpty(result, V)).</blockquote>I am not sure about the rationale behind that decision, but I am convinced that it would effectively limit the potential of the Generators. So I decided to fix this.  <h2>Sane Generators</h2>To close the iterator, <code>Iterator.prototype.return</code> is called. (At the time of this writing, not many JavaScript Engines support this function. You can find the support for this feature by popular engines, <a href="https://kangax.github.io/compat-table/es6/#test-generators_yield_*,_iterator_closing">here</a>.) So I decided to override that and allow the actual <code>return</code> function to be invoked only when explicitly called with an argument.<!--?prettify lang=javascript?--><pre class="prettyprint">function returnFunction(originalReturn, genObject) {<br />  return function(arg) {<br />    return arguments.length ? originalReturn.call(genObject, arg) : {<br />      done: false<br />    };<br />  };<br />}<br /><br />function SaneGenerator(genObject) {<br />  var originalReturn = genObject['return'];<br /><br />  if (typeof originalReturn === 'function') {<br />    Object.defineProperty(genObject, 'return', {<br />      value: returnFunction(originalReturn, genObject)<br />    });<br />  }<br /><br />  return genObject;<br />}</pre>You can see the actual and complete implementation in my GitHub repository, <a href="https://github.com/thefourtheye/sane-generator/blob/master/index.js">https://github.com/thefourtheye/sane-generator</a>.  Now, you can use the <code>SaneGenerator</code> like this <!--?prettify lang=javascript?--><pre class="prettyprint">function* NumberGenerator() {<br />  for (var i = 0; i &lt; 10; i += 1) {<br />    yield i;<br />  }<br />}<br /><br />var numbers = SaneGenerator(NumberGenerator());<br /><br />for (var num of numbers) {<br />  if (num === 3) {<br />    break;<br />  }<br />}<br /><br />console.log(numbers.next());<br />// {"value":4,"done":false}<br /></pre>You can find the online demo for this JavaScript program, made with Babel's REPL, <a href="https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=true&amp;code=function%20returnFunction(originalReturn%2C%20genObject)%20%7B%0A%20%20return%20function(arg)%20%7B%0A%20%20%20%20return%20arguments.length%20%3F%20originalReturn.call(genObject%2C%20arg)%20%3A%20%7B%0A%20%20%20%20%20%20done%3A%20false%0A%20%20%20%20%7D%3B%0A%20%20%7D%3B%0A%7D%0A%0Afunction%20SaneGenerator(genObject)%20%7B%0A%20%20var%20originalReturn%20%3D%20genObject%5B'return'%5D%3B%0A%0A%20%20if%20(typeof%20originalReturn%20%3D%3D%3D%20'function')%20%7B%0A%20%20%20%20Object.defineProperty(genObject%2C%20'return'%2C%20%7B%0A%20%20%20%20%20%20value%3A%20returnFunction(originalReturn%2C%20genObject)%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20return%20genObject%3B%0A%7D%0A%0Afunction*%20NumberGenerator()%20%7B%0A%20%20for%20(var%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%20%2B%3D%201)%20%7B%0A%20%20%20%20yield%20i%3B%0A%20%20%7D%0A%7D%0A%0Avar%20numbers%20%3D%20SaneGenerator(NumberGenerator())%3B%0A%0Afor%20(var%20num%20of%20numbers)%20%7B%0A%20%20if%20(num%20%3D%3D%3D%203)%20%7B%0A%20%20%20%20break%3B%0A%20%20%7D%0A%7D%0A%0Aconsole.log(numbers.next())%3B%0A">here</a>.  <h2>NPM Module</h2>This is available as an NPM module now. <a href="https://www.npmjs.com/package/sane-generator">https://www.npmjs.com/package/sane-generator</a> </div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js - Modules and Exports]]></title>
    <link href="http://thefourtheye.in/2014/03/01/nodejs-modules-and-exports/"/>
    <updated>2014-03-01T09:26:00+05:30</updated>
    <id>http://thefourtheye.in/2014/03/01/nodejs-modules-and-exports</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on"><p>I think most of us haven't understood the concept of modules in Node.js properly. Let us discuss the basics of that in this post.</p><h2>Module System</h2><p>In Node.js, when you create a new JavaScript file, that will be considered as a separate module. Inside that module, you can access the module itself with <code>module</code> object. You can check that, like this</p><pre class="prettyprint">console.log(module);</pre>which produces something like this<br /><pre class="prettyprint">{ id: '.',<br />  exports: {},<br />  parent: null,<br />  filename: '/home/thefourtheye/Desktop/Test.js',<br />  loaded: false,<br />  children: [],<br />  paths:<br />   [ '/home/thefourtheye/Desktop/node_modules',<br />     '/home/thefourtheye/node_modules',<br />     '/home/node_modules',<br />     '/node_modules' ] }<br /></pre><h2>exports and module.exports</h2><p>As you can see, it is just a plain JavaScript object. The important thing to be noted here is, <a href="http://nodejs.org/api/modules.html#modules_module_exports">the exports object in module</a>. In every module, JavaScript, by default, offers another variable called <a href="http://nodejs.org/api/modules.html#modules_exports_alias">exports</a>. That is nothing but the same object in module object of the same name. You can check that like this</p><pre class="prettyprint">exports.jabberwocky = "blah blah blah";<br />console.log(module.exports);            // { jabberwocky: 'blah blah blah' }<br /></pre><p>So, they are one and the same. But, when some other module requires this module, the object returned will be module.exports only. As long as you are augmenting module.exports and exports, there will be no problem. But when you assign something to either exports or module.exports, they no longer refer to the same object.</p><pre class="prettyprint">exports = {"king": "Sourav Ganguly"};<br />console.log(module.exports);           // {}<br />console.log(exports);                  // { king: 'Sourav Ganguly' }<br /></pre><p>You are making both exports and module.exports refer to different objects. So, when this module is exported, an empty object will be exported (remember, <b>only module.exports will be exported when required from other files</b>), even though we assigned a valid object to exports. So, care should be taken when you replace either of those objects. That is the reason why we often see something like this</p><pre class="prettyprint">exports = module.exports = ...<br /></pre><h2>Scope</h2><p>All the variables and functions declared within the module will be accessible only inside the module (as long as they are created with var keyword). Quoting from the <a href="http://nodejs.org/api/modules.html#modules_modules">modules documentation</a></p><blockquote>Variables local to the module will be private, as though the module was wrapped in a function.</blockquote>Happy modularizing the code :)<br /><br /></div></div>
]]></content>
  </entry>
  
</feed>
