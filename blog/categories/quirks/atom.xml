<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Quirks | thefourtheye's weblog]]></title>
  <link href="http://thefourtheye.in/blog/categories/quirks/atom.xml" rel="self"/>
  <link href="http://thefourtheye.in/"/>
  <updated>2018-05-27T11:53:52+05:30</updated>
  <id>http://thefourtheye.in/</id>
  <author>
    <name><![CDATA[Sakthipriyan Vairamani (thefourtheye)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JS Quirks: Stringified Numbers]]></title>
    <link href="http://thefourtheye.in/2016/11/15/js-quirks-stringified-numbers/"/>
    <updated>2016-11-15T00:38:30+05:30</updated>
    <id>http://thefourtheye.in/2016/11/15/js-quirks-stringified-numbers</id>
    <content type="html"><![CDATA[<p>When I was working on <a href="https://github.com/nodejs/node/pull/9492">Node.js PR 9492</a>, <a href="https://github.com/nodejs/node/pull/9492#discussion_r86987446">this comment</a></p>

<blockquote>
  <p>This should probably test for a wider range of values. <code>test/parallel/test-net-internal.js</code> has some good examples.</p>
</blockquote>

<p>made me look at <a href="https://github.com/nodejs/node/blob/fc44bd4d0b984f7b926b8c92b8e9a88da1c08921/test/parallel/test-net-internal.js">that file</a>. As I was going through the test, few of the bad values were interesting. I normally test with stringified positive decimal numbers and negative decimal numbers. But I saw stringified negative octal, binary, and hexa decimal numbers.</p>

<pre><code class="language-js">const bad = [-1, 'a', {}, [], false, true, 0xFFFF + 1, Infinity,
             -Infinity, NaN, undefined, null, '', ' ', 1.1, '0x',
             '-0x1', '-0o1', '-0b1', '0o', '0b'];
</code></pre>

<p>I got curious as I have never used them before, I just wanted to see their corresponding negative values. So I wrote a program like this</p>

<pre><code class="language-js">[-0x1, '-0x1', -0o1, '-0o1', -0b1, '-0b1'].forEach(item =&gt; console.log(item, +item));
</code></pre>

<p>and I was expecting to see the result</p>

<pre><code class="language-text">-1 -1
-0x1 -1
-1 -1
-0o1 -1
-1 -1
-0b1 -1
</code></pre>

<p>but all I got was</p>

<pre><code class="language-text">-1 -1
-0x1 NaN
-1 -1
-0o1 NaN
-1 -1
-0b1 NaN
</code></pre>

<p>The unary - operator simply negates the magnitude of the numbers. The stringified numbers were not processed in the same way as their number counterparts. So I looked at the ECMAScript specificationâ€™s <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber-applied-to-the-string-type">ToNumber Applied to the String Type</a> section (which is actually responsible for converting strings to numbers).</p>

<pre><code class="language-text">StrNumericLiteral :::
    StrDecimalLiteral
    BinaryIntegerLiteral
    OctalIntegerLiteral
    HexIntegerLiteral
...
...
StrDecimalLiteral :::
    StrUnsignedDecimalLiteral
    + StrUnsignedDecimalLiteral
    - StrUnsignedDecimalLiteral
</code></pre>

<p>Only the <code>StrDecimalLiteral</code> production allows signed numbers. If we look at the definition of others in the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-literals-numeric-literals">Numeric Literals</a> section,</p>

<pre><code class="language-text">BinaryIntegerLiteral ::
    0b BinaryDigits
    0B BinaryDigits

BinaryDigits ::
    BinaryDigit
    BinaryDigits BinaryDigit

BinaryDigit :: one of
    0 1

OctalIntegerLiteral ::
    0o OctalDigits
    0O OctalDigits

OctalDigits ::
    OctalDigit
    OctalDigits OctalDigit

OctalDigit :: one of
    0 1 2 3 4 5 6 7

HexIntegerLiteral ::
    0x HexDigits
    0X HexDigits

HexDigits ::
    HexDigit
    HexDigits HexDigit

HexDigit :: one of
    0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F
</code></pre>

<p>So, as per the specification, only the decimal numbers can have signs in the stringified number form. That is why the others are not considered as numbers.</p>
]]></content>
  </entry>
  
</feed>
