<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | thefourtheye's weblog]]></title>
  <link href="http://thefourtheye.in/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://thefourtheye.in/"/>
  <updated>2016-11-15T00:36:27+05:30</updated>
  <id>http://thefourtheye.in/</id>
  <author>
    <name><![CDATA[Sakthipriyan Vairamani (thefourtheye)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sane ECMAScript 6 Generators]]></title>
    <link href="http://thefourtheye.in/2016/02/03/sane-ecmascript-6-generators/"/>
    <updated>2016-02-03T20:47:00+05:30</updated>
    <id>http://thefourtheye.in/2016/02/03/sane-ecmascript-6-generators</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">This post is cross posted in Medium, <a href="https://medium.com/@thefourtheye/sane-ecmascript-6-generators-7d1adcd85536#.cpvn9y4n8">here</a>.<br /><br />I recently found one interesting thing about ES6 Generators. I come from Python background and I understood generators as in Python. So, I expected the following Python code's equivalent ECMAScript 6 code also to work as well. <!--?prettify lang=python linenums=true?--><br /><pre class="prettyprint">&gt;&gt;&gt; numbers = (num for num in range(10))<br />&gt;&gt;&gt; for num in numbers:<br />...   if num == 3:<br />...     break<br />... <br />&gt;&gt;&gt; next(numbers)<br />4<br /></pre>You can find the online demo for this Python program, <a href="http://ideone.com/9lYJOz">here</a>.<br /><br />But then, when I used Babel to transpile the following code and executed it<!--?prettify lang=javascript linenums=true?--><br /><pre class="prettyprint">function* NumberGenerator() {<br />  for (var i = 0; i &lt; 10; i += 1) {<br />    yield i;<br />  }<br />}<br /><br />var numbers = NumberGenerator();<br /><br />for (var num of numbers) {<br />  if (num === 3) {<br />    break;<br />  }<br />}<br /><br />console.log(numbers.next());<br />// {"done":true}<br /></pre>You can find the online demo for this JavaScript program, made with Babel's REPL, <a href="https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=true&amp;code=function*%20NumberGenerator()%20%7B%0A%20%20for%20(var%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%20%2B%3D%201)%20%7B%0A%20%20%20%20yield%20i%3B%0A%20%20%7D%0A%7D%0A%0Avar%20numbers%20%3D%20NumberGenerator()%3B%0A%0Afor%20(var%20num%20of%20numbers)%20%7B%0A%20%20if%20(num%20%3D%3D%3D%203)%20%7B%0A%20%20%20%20break%3B%0A%20%20%7D%0A%7D%0A%0Aconsole.log(numbers.next())%3B%0A">here</a>.  As you see here, when I broke out of the loop, the Generator Object got closed. This was pointed out to me by <a href="http://stackoverflow.com/users/785065/loganfsmyth">Logan Smyth</a> in Babel's Slack discussion. I was really surprised by this behavior and found the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator, lhsKind, labelSet )</a> section in the ECMAScript 6 Specification, which says  <blockquote>If LoopContinues(result, labelSet) is false, return IteratorClose(iterator, UpdateEmpty(result, V)).</blockquote>I am not sure about the rationale behind that decision, but I am convinced that it would effectively limit the potential of the Generators. So I decided to fix this.  <h2>Sane Generators</h2>To close the iterator, <code>Iterator.prototype.return</code> is called. (At the time of this writing, not many JavaScript Engines support this function. You can find the support for this feature by popular engines, <a href="https://kangax.github.io/compat-table/es6/#test-generators_yield_*,_iterator_closing">here</a>.) So I decided to override that and allow the actual <code>return</code> function to be invoked only when explicitly called with an argument.<!--?prettify lang=javascript?--><pre class="prettyprint">function returnFunction(originalReturn, genObject) {<br />  return function(arg) {<br />    return arguments.length ? originalReturn.call(genObject, arg) : {<br />      done: false<br />    };<br />  };<br />}<br /><br />function SaneGenerator(genObject) {<br />  var originalReturn = genObject['return'];<br /><br />  if (typeof originalReturn === 'function') {<br />    Object.defineProperty(genObject, 'return', {<br />      value: returnFunction(originalReturn, genObject)<br />    });<br />  }<br /><br />  return genObject;<br />}</pre>You can see the actual and complete implementation in my GitHub repository, <a href="https://github.com/thefourtheye/sane-generator/blob/master/index.js">https://github.com/thefourtheye/sane-generator</a>.  Now, you can use the <code>SaneGenerator</code> like this <!--?prettify lang=javascript?--><pre class="prettyprint">function* NumberGenerator() {<br />  for (var i = 0; i &lt; 10; i += 1) {<br />    yield i;<br />  }<br />}<br /><br />var numbers = SaneGenerator(NumberGenerator());<br /><br />for (var num of numbers) {<br />  if (num === 3) {<br />    break;<br />  }<br />}<br /><br />console.log(numbers.next());<br />// {"value":4,"done":false}<br /></pre>You can find the online demo for this JavaScript program, made with Babel's REPL, <a href="https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=true&amp;code=function%20returnFunction(originalReturn%2C%20genObject)%20%7B%0A%20%20return%20function(arg)%20%7B%0A%20%20%20%20return%20arguments.length%20%3F%20originalReturn.call(genObject%2C%20arg)%20%3A%20%7B%0A%20%20%20%20%20%20done%3A%20false%0A%20%20%20%20%7D%3B%0A%20%20%7D%3B%0A%7D%0A%0Afunction%20SaneGenerator(genObject)%20%7B%0A%20%20var%20originalReturn%20%3D%20genObject%5B'return'%5D%3B%0A%0A%20%20if%20(typeof%20originalReturn%20%3D%3D%3D%20'function')%20%7B%0A%20%20%20%20Object.defineProperty(genObject%2C%20'return'%2C%20%7B%0A%20%20%20%20%20%20value%3A%20returnFunction(originalReturn%2C%20genObject)%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20return%20genObject%3B%0A%7D%0A%0Afunction*%20NumberGenerator()%20%7B%0A%20%20for%20(var%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%20%2B%3D%201)%20%7B%0A%20%20%20%20yield%20i%3B%0A%20%20%7D%0A%7D%0A%0Avar%20numbers%20%3D%20SaneGenerator(NumberGenerator())%3B%0A%0Afor%20(var%20num%20of%20numbers)%20%7B%0A%20%20if%20(num%20%3D%3D%3D%203)%20%7B%0A%20%20%20%20break%3B%0A%20%20%7D%0A%7D%0A%0Aconsole.log(numbers.next())%3B%0A">here</a>.  <h2>NPM Module</h2>This is available as an NPM module now. <a href="https://www.npmjs.com/package/sane-generator">https://www.npmjs.com/package/sane-generator</a> </div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending POST/PUT Requests, With JSON Form Body, in Node.js]]></title>
    <link href="http://thefourtheye.in/2014/09/15/sending-postput-requests-with-json-form/"/>
    <updated>2014-09-15T21:05:00+05:30</updated>
    <id>http://thefourtheye.in/2014/09/15/sending-postput-requests-with-json-form</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">Today one of my friends asked me to help him with sending a PUT request to a remote server, in Node.js. I started Googling and as usual I found this <a href="http://stackoverflow.com/a/11298667/1903116">excellent Stackoverflow answer</a>.<pre class="prettyprint">var http = require('http');<br /><br />var options = {<br />host: 'localhost',<br />path: '/users/1',<br />port: 3000,<br />method: 'PUT'<br />};<br /><br />var callback = function(response) {<br />var str = '';<br /><br />//another chunk of data has been recieved, so append it to `str`<br />response.on('data', function(chunk) {<br />str += chunk;<br />});<br /><br />//the whole response has been recieved, so we just print it out here<br />response.on('end', function() {<br />console.log(str);<br />});<br />};<br /><br />http.request(options, callback).end();<br /></pre>This works well. It creates a HTTP PUT request, to the server hosted at localhost on port 3000 and in the path '/users/1'. Now the interesting part is, normally, when we send PUT/POST requests, we used to send parameters. These parameters will be represented normally as key-value pairs. It will be easy to represent them in JSON format. So, the above code just needs few more changes to send the request with a JSON body.<pre class="prettyprint">var http = require('http');<br /><br />var bodyString = JSON.stringify({<br />    username: 'thefourtheye',<br />    password: '********'<br />});<br /><br />var headers = {<br />    'Content-Type': 'application/json',<br />    'Content-Length': bodyString.length<br />};<br /><br />var options = {<br />    host: 'localhost',<br />    path: '/users/1',<br />    port: 3000,<br />    method: 'PUT',<br />    headers: headers<br />};<br /><br />// callback is same as in the above seen example.<br />...<br />...<br /><br />http.request(options, callback).write(bodyString);<br /></pre>What we are actually doing here is, creating a JSON structure for the form body and then we are converting that to a valid JSON string. This is important, since we are sending the body as a JSON structure, it should conform to the JSON semantics. So, if you printed the bodyString, you would get something like this<pre class="prettyprint">{"username":"thefourtheye","password":"********"}<br /></pre>Now, we constructed the body string. But, how will we let the server know that the request is not over immediately after the HTTP Request line and the headers in the HTTP Request.<br /><br />Source: <a href="http://www.tcpipguide.com/free/t_HTTPRequestMessageFormat.htm">http://www.tcpipguide.com/free/t_HTTPRequestMessageFormat.htm</a><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://www.tcpipguide.com/free/diagrams/httprequest.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://www.tcpipguide.com/free/diagrams/httprequest.png" /></a></div><br />As we see in the picture, after the headers section, there is the body section, which is where the body string we generated will be put in. But how will the web-server know the format of the body section and where it actually ends? That is why we put in two 'headers' in the 'options' object. <pre class="prettyprint">var headers = {<br />    'Content-Type': 'application/json',<br />    'Content-Length': bodyString.length<br />};<br /></pre><br />Here we specify the type of the body and the actual length of it. Okay, now that we specified the type and the length, how are we going to send the string? We simply write it to the 'ClientRequest' object returned by the 'http.request', like this <pre class="prettyprint">http.request(options, callback).write(bodyString);<br /></pre>That is it :-)<br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js - Modules and Exports]]></title>
    <link href="http://thefourtheye.in/2014/03/01/nodejs-modules-and-exports/"/>
    <updated>2014-03-01T09:26:00+05:30</updated>
    <id>http://thefourtheye.in/2014/03/01/nodejs-modules-and-exports</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on"><p>I think most of us haven't understood the concept of modules in Node.js properly. Let us discuss the basics of that in this post.</p><h2>Module System</h2><p>In Node.js, when you create a new JavaScript file, that will be considered as a separate module. Inside that module, you can access the module itself with <code>module</code> object. You can check that, like this</p><pre class="prettyprint">console.log(module);</pre>which produces something like this<br /><pre class="prettyprint">{ id: '.',<br />  exports: {},<br />  parent: null,<br />  filename: '/home/thefourtheye/Desktop/Test.js',<br />  loaded: false,<br />  children: [],<br />  paths:<br />   [ '/home/thefourtheye/Desktop/node_modules',<br />     '/home/thefourtheye/node_modules',<br />     '/home/node_modules',<br />     '/node_modules' ] }<br /></pre><h2>exports and module.exports</h2><p>As you can see, it is just a plain JavaScript object. The important thing to be noted here is, <a href="http://nodejs.org/api/modules.html#modules_module_exports">the exports object in module</a>. In every module, JavaScript, by default, offers another variable called <a href="http://nodejs.org/api/modules.html#modules_exports_alias">exports</a>. That is nothing but the same object in module object of the same name. You can check that like this</p><pre class="prettyprint">exports.jabberwocky = "blah blah blah";<br />console.log(module.exports);            // { jabberwocky: 'blah blah blah' }<br /></pre><p>So, they are one and the same. But, when some other module requires this module, the object returned will be module.exports only. As long as you are augmenting module.exports and exports, there will be no problem. But when you assign something to either exports or module.exports, they no longer refer to the same object.</p><pre class="prettyprint">exports = {"king": "Sourav Ganguly"};<br />console.log(module.exports);           // {}<br />console.log(exports);                  // { king: 'Sourav Ganguly' }<br /></pre><p>You are making both exports and module.exports refer to different objects. So, when this module is exported, an empty object will be exported (remember, <b>only module.exports will be exported when required from other files</b>), even though we assigned a valid object to exports. So, care should be taken when you replace either of those objects. That is the reason why we often see something like this</p><pre class="prettyprint">exports = module.exports = ...<br /></pre><h2>Scope</h2><p>All the variables and functions declared within the module will be accessible only inside the module (as long as they are created with var keyword). Quoting from the <a href="http://nodejs.org/api/modules.html#modules_modules">modules documentation</a></p><blockquote>Variables local to the module will be private, as though the module was wrapped in a function.</blockquote>Happy modularizing the code :)<br /><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling Node.js Scripts in Windows 7 With Sublime Text 3]]></title>
    <link href="http://thefourtheye.in/2013/07/29/Compiling-Node.js-scripts-in-Windows-7-with-Sublime-Text-3/"/>
    <updated>2013-07-29T19:56:00+05:30</updated>
    <id>http://thefourtheye.in/2013/07/29/Compiling-Node.js-scripts-in-Windows-7-with-Sublime-Text-3</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on"><p>This is a continuation of <a href="http://www.thefourtheye.in/2013/07/Compiling-Cpp-11-Programs-with-Sublime-Text-3.html">Compiling CPP 11 Programs with Sublime Text 3 in Ubuntu</a> where we saw how to configure Sublime Text 3 in Ubuntu 13.04 to compile C++ 11 programs. In this post, we ll see how to execute Node.js programs in Windows 7 machine's Sublime Text 3. I am going to assume that Node.js is installed properly and PATH variable is also set properly. If you are using Windows Installer, we dont have to worry about this. <br /><ol><li>We need to create the following directory structure in the User's home directory <code>AppData\Roaming\Sublime Text 3\Packages\JS\</code>. In my machine, home directory is <code>C:\Users\[username]</code>. To know the current user's home directory, open <code>Cmd.exe</code> and type <code>echo %userprofile%</code>. <br /><li>In that directory, create a file called "JS.sublime-build". So, the location of the file from the home directory is <code>AppData\Roaming\Sublime Text 3\Packages\JS\JS.sublime-build</code> You can name the sublime-build file as anything you want. I have simply named it here as JS.<br /><li>Copy and paste the following text in to it.<br /><pre class="prettyprint">{<br /> "cmd": ["node.exe", "${file}"],<br /> "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",<br /> "working_dir": "${file_path}",<br /> "selector": "source.js",<br /> "variants":<br /> [<br />  {<br />   "name": "Run",<br />   "cmd":["node.exe", "${file}"]<br />  }<br /> ]<br />}<br /></pre><li>Thats it. Open Sublime Text 3. Click on Tools-&gt;Build System. You should see JS as one of the options. From now on, you can execute node.js scripts simply by pressing Ctrl-B.<br />&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;
</li></li></li></li></ol></p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing node.js in Linux]]></title>
    <link href="http://thefourtheye.in/2013/03/25/installing-nodejs-in-linux/"/>
    <updated>2013-03-25T20:59:00+05:30</updated>
    <id>http://thefourtheye.in/2013/03/25/installing-nodejs-in-linux</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">I tested these steps in RHEL 5.4 and Ubuntu 12.10.<br /><br /><ol style="text-align: left;"><li>wget http://nodejs.org/dist/v0.10.1/node-v0.10.1.tar.gz</li><li>tar -xvf node-v0.10.1.tar.gz</li><li>cd node-v0.10.1</li><li>./configure --prefix=&lt;a directory to which you have write and execute access&gt;</li><li>make</li><li>make install</li><li>Create a file, say Test.js and add the following lines to it<br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">var http = require('http');<br /><br />http.createServer(function (request, response) {<br />&nbsp; response.writeHead(200, {'Content-Type': 'text/plain'});<br />&nbsp; response.end('Hello World\n');<br />}).listen(8124);<br /><br />console.log('Server running at http://127.0.0.1:8124/');</span></li><li>node Test.js</li><li>Open a browser and visit http://127.0.0.1:8124/. If all went fine, you should see Hello World in the browser.</li></ol><div style="text-align: left;">It is as simple as that. I did not hit any road block at all. They all went fine.</div></div></div>
]]></content>
  </entry>
  
</feed>
