<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | thefourtheye's weblog]]></title>
  <link href="http://thefourtheye.in/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://thefourtheye.in/"/>
  <updated>2019-02-23T13:27:05+05:30</updated>
  <id>http://thefourtheye.in/</id>
  <author>
    <name><![CDATA[Sakthipriyan Vairamani (thefourtheye)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 3.5 and Django 1.7's HTMLParseError]]></title>
    <link href="http://thefourtheye.in/2015/02/15/python-35-and-django-17s-htmlparseerror/"/>
    <updated>2015-02-15T13:20:00+05:30</updated>
    <id>http://thefourtheye.in/2015/02/15/python-35-and-django-17s-htmlparseerror</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">I just updated my Python installation to 3.5 Alpha 1 and started with Django today and I hit a road block already. It all went fine, when I created the virtual environment and installed Django 1.7.4 in it. And then when I did <code>startproject</code>, I got <code>AttributeError: module 'html.parser' has no attribute 'HTMLParseError'</code>.<br /><pre class="prettyprint">(py3.5venv) ➜  myProject git:(master) ✗ django-admin.py startproject myProject<br />Traceback (most recent call last):<br />  File "/py3.5venv/bin/django-admin.py", line 5, in <module><br />    management.execute_from_command_line()<br />  File "/py3.5venv/lib/python3.5/site-packages/django/core/management/__init__.py", line 385, in execute_from_command_line<br />    utility.execute()<br />  File "/py3.5venv/lib/python3.5/site-packages/django/core/management/__init__.py", line 354, in execute<br />    django.setup()<br />  File "/py3.5venv/lib/python3.5/site-packages/django/__init__.py", line 18, in setup<br />    from django.utils.log import configure_logging<br />  File "/py3.5venv/lib/python3.5/site-packages/django/utils/log.py", line 13, in <module><br />    from django.views.debug import ExceptionReporter, get_exception_reporter_filter<br />  File "/py3.5venv/lib/python3.5/site-packages/django/views/debug.py", line 10, in <module><br />    from django.http import (HttpResponse, HttpResponseServerError,<br />  File "/py3.5venv/lib/python3.5/site-packages/django/http/__init__.py", line 4, in <module><br />    from django.http.response import (<br />  File "/py3.5venv/lib/python3.5/site-packages/django/http/response.py", line 13, in <module><br />    from django.core.serializers.json import DjangoJSONEncoder<br />  File "/py3.5venv/lib/python3.5/site-packages/django/core/serializers/__init__.py", line 23, in <module><br />    from django.core.serializers.base import SerializerDoesNotExist<br />  File "/py3.5venv/lib/python3.5/site-packages/django/core/serializers/base.py", line 6, in <module><br />    from django.db import models<br />  File "/py3.5venv/lib/python3.5/site-packages/django/db/models/__init__.py", line 6, in <module><br />    from django.db.models.query import Q, QuerySet, Prefetch  # NOQA<br />  File "/py3.5venv/lib/python3.5/site-packages/django/db/models/query.py", line 13, in <module><br />    from django.db.models.fields import AutoField, Empty<br />  File "/py3.5venv/lib/python3.5/site-packages/django/db/models/fields/__init__.py", line 18, in <module><br />    from django import forms<br />  File "/py3.5venv/lib/python3.5/site-packages/django/forms/__init__.py", line 6, in <module><br />    from django.forms.fields import *  # NOQA<br />  File "/py3.5venv/lib/python3.5/site-packages/django/forms/fields.py", line 18, in <module><br />    from django.forms.utils import from_current_timezone, to_current_timezone<br />  File "/py3.5venv/lib/python3.5/site-packages/django/forms/utils.py", line 15, in <module><br />    from django.utils.html import format_html, format_html_join, escape<br />  File "/py3.5venv/lib/python3.5/site-packages/django/utils/html.py", line 16, in <module><br />    from .html_parser import HTMLParser, HTMLParseError<br />  File "/py3.5venv/lib/python3.5/site-packages/django/utils/html_parser.py", line 12, in <module><br />    HTMLParseError = _html_parser.HTMLParseError<br />AttributeError: module 'html.parser' has no attribute 'HTMLParseError'&lt;/pre&gt;Then <a href="http://stackoverflow.com/users/918959/antti-haapala">Antti Haapala</a> (a friend from <a href="http://chat.stackoverflow.com/rooms/6/python">Stakoverflow's Python Chat room</a>) found out that it is because <code class="prettyprint">HTMLParseError</code> is deprecated from Python 3.3 onwards and removed in Python 3.5, as per the <a href="https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParseError">official documentation</a>. He continued the investigation and found out that django guys are already aware of this, as they have <a href="https://code.djangoproject.com/ticket/23763">a bug raised</a>, and <a href="https://github.com/django/django/commit/b07aa52e8a8e4c7fdc7265f75ce2e7992e657ae9">the fix has been already delivered</a> to the code repository.<br />Now, all we can do is, wait for the version of django which officially supports Python 3.5 or manually patch html_parser.py file as per the above shown fix. Even if we patch it manually, there is no guarantee that everything else will work fine.<br />&lt;/div&gt;&lt;/div&gt;
</module></module></module></module></module></module></module></module></module></module></module></module></module></module></module></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python's Venv Problem With Ensurepip in Ubuntu]]></title>
    <link href="http://thefourtheye.in/2014/12/30/Python-venv-problem-with-ensurepip-in-Ubuntu/"/>
    <updated>2014-12-30T14:52:00+05:30</updated>
    <id>http://thefourtheye.in/2014/12/30/Python-venv-problem-with-ensurepip-in-Ubuntu</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">Ubuntu 14.04's Python 3.4 installation has a problem with <code>ensurepip</code> module, as described in <a href="https://bugs.launchpad.net/ubuntu/+source/python3.4/+bug/1290847">this bug</a>. So if you follow the steps mentioned in the <a href="https://docs.python.org/3/library/venv.html#creating-virtual-environments">official documentation</a>, you would see an error message like this<pre class="prettyprint">➜  Python  python3 -m venv py3.4venv<br />Error: Command '['/home/thefourtheye//py34venv/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1<br /></pre>To resolve this problem, first install the <code>venv</code>, without <code>pip</code>, like this<br /><pre class="prettyprint">python3 -m venv py3.4venv --without-pip</pre>And then if you install <code>pip</code>, like this, it will still fail<pre class="prettyprint">(py3.4venv) ➜  py3.4venv  python -m ensurepip --upgrade<br />/home/thefourtheye/Python/py3.4venv/bin/python: No module named ensurepip<br />(py3.4venv) ➜  py3.4venv  python<br />Python 3.4.0 (default, Apr 11 2014, 13:05:11)<br />[GCC 4.8.2] on linux<br />Type "help", "copyright", "credits" or "license" for more information.<br />...<br /></pre>So, you need to install, <code>pip</code> separately, like mentioned in the <a href="http://pip.readthedocs.org/en/latest/installing.html#install-pip">pip's official documentation</a>. So, the actual list of steps go like this<br /><pre class="prettyprint">➜  Python  python3 -m venv py3.4venv --without-pip <br />➜  Python  cd py3.4venv <br />➜  py3.4venv  source bin/activate<br />(py3.4venv) ➜  py3.4venv  wget https://bootstrap.pypa.io/get-pip.py<br />--2014-12-30 14:35:34--  https://bootstrap.pypa.io/get-pip.py<br />Resolving bootstrap.pypa.io (bootstrap.pypa.io)... 103.245.222.175<br />Connecting to bootstrap.pypa.io (bootstrap.pypa.io)|103.245.222.175|:443... connected.<br />HTTP request sent, awaiting response... 200 OK<br />Length: 1581355 (1.5M) [text/x-python]<br />Saving to: ‘get-pip.py’<br /><br />100%[=====================================================================================================================&gt;] 15,81,355    129KB/s   in 8.9s   <br /><br />2014-12-30 14:35:43 (173 KB/s) - ‘get-pip.py’ saved [1581355/1581355]<br /><br />(py3.4venv) ➜  py3.4venv  python get-pip.py <br />Collecting pip<br />  Downloading pip-6.0.3-py2.py3-none-any.whl (1.3MB)<br />    100% |################################| 1.3MB 139kB/s <br />Collecting setuptools<br />  Downloading setuptools-9.1-py2.py3-none-any.whl (552kB)<br />    100% |################################| 552kB 180kB/s <br />Installing collected packages: setuptools, pip<br /><br /><br />Successfully installed pip-6.0.3 setuptools-9.1<br />(py3.4venv) ➜  py3.4venv  deactivate <br />➜  py3.4venv  source bin/activate                      <br />(py3.4venv) ➜  py3.4venv  pip install django<br />Collecting django<br />  Using cached Django-1.7.1-py2.py3-none-any.whl<br />Installing collected packages: django<br /><br />Successfully installed django-1.7.1<br />(py3.4venv) ➜  py3.4venv  which pip<br />/home/thefourtheye/Python/py3.4venv/bin/pip<br />(py3.4venv) ➜  py3.4venv  <br /></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Dictionary Comprehension]]></title>
    <link href="http://thefourtheye.in/2013/11/17/python-dictionary-comprehension/"/>
    <updated>2013-11-17T13:35:00+05:30</updated>
    <id>http://thefourtheye.in/2013/11/17/python-dictionary-comprehension</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on"><p>Dictionary comprehensions were <a href="http://docs.python.org/2.7/whatsnew/2.7.html#other-language-changes" target="_blank">backported from Python 3.x to 2.7</a>. I always have believed that they are very pythonic and functional way of programming. Whenever comprehension is used, mutation of mutable elements (set, dict, list etc) becomes unnecessary and that definitely improves the performance as well. Lets start with a simple dictionary comprehension</p><pre class="prettyprint">&gt;&gt;&gt; myMatrix = [[1, 100], [2, 200], [3, 300]]<br />&gt;&gt;&gt; {key:value for key, value in myMatrix}<br />{1: 100, 2: 200, 3: 300}<br /></pre><p>Here we use unpacking from <code>myMatrix</code> list and we have used <code>{}</code> with <code>key:value</code> notation. This way, we can easily convert a list of lists to a dictionary with dictionary comprehension. Lets look at a complicated example</p><pre class="prettyprint">&gt;&gt;&gt; myMatrix = [[100, 100], [20, 200], [30, 300]]<br />&gt;&gt;&gt; {(key + 100 if key &lt; 100 else key):(value/10 if value &gt;= 200 else value/5) for key, value in myMatrix}<br />{120: 20, 130: 30, 100: 20}<br /></pre><p>Here we use <a href="http://docs.python.org/2/reference/expressions.html#conditional-expressions" target="_blank">conditional expressions</a> to dynamically decide what the key and the value are going to be.</p><h2>Performance</h2><pre class="prettyprint">&gt;&gt;&gt; def changeDict():<br />...     newDict = {}<br />...     for key, value in myMatrix:<br />...         newDict[(key + 100 if key &lt; 100 else key)] = value/10 if value &gt;= 200 else value/5<br />...     return newDict<br />...     <br />&gt;&gt;&gt; from timeit import timeit<br />&gt;&gt;&gt; timeit("{(key + 100 if key &lt; 100 else key):(value/10 if value &gt;= 200 else value/5) for key, value in myMatrix}", setup="from __main__ import myMatrix")<br />0.7076609134674072<br />&gt;&gt;&gt; timeit("changeDict()", setup="from __main__ import myMatrix, changeDict")<br />0.7484149932861328<br /></pre><p>The use of comprehension is slightly faster than the function which adds keys and values to an existing dictionary. This difference will be significant when the <code>myMatrix</code> has huge amount of data.</p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen of Python by Tim Peters]]></title>
    <link href="http://thefourtheye.in/2013/10/27/zen-of-python-by-tim-peters/"/>
    <updated>2013-10-27T17:20:00+05:30</updated>
    <id>http://thefourtheye.in/2013/10/27/zen-of-python-by-tim-peters</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">Python has an Easter Egg :) just try to import <code>this</code> like this<br /><pre class="prettyprint">import this</pre>you ll get this<br /><pre>The Zen of Python, by Tim Peters<br /><br />Beautiful is better than ugly.<br />Explicit is better than implicit.<br />Simple is better than complex.<br />Complex is better than complicated.<br />Flat is better than nested.<br />Sparse is better than dense.<br />Readability counts.<br />Special cases aren't special enough to break the rules.<br />Although practicality beats purity.<br />Errors should never pass silently.<br />Unless explicitly silenced.<br />In the face of ambiguity, refuse the temptation to guess.<br />There should be one-- and preferably only one --obvious way to do it.<br />Although that way may not be obvious at first unless you're Dutch.<br />Now is better than never.<br />Although never is often better than *right* now.<br />If the implementation is hard to explain, it's a bad idea.<br />If the implementation is easy to explain, it may be a good idea.<br />Namespaces are one honking great idea -- let's do more of those!<br /></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPOJ Best Solutions for the Double Helix]]></title>
    <link href="http://thefourtheye.in/2013/06/30/spoj-best-solutions-for-double-helix/"/>
    <updated>2013-06-30T18:08:00+05:30</updated>
    <id>http://thefourtheye.in/2013/06/30/spoj-best-solutions-for-double-helix</id>
    <content type="html"><![CDATA[<div class="post">
<div dir="ltr" style="text-align: left;" trbidi="on">Unforgettable day. Got my solution featured, as one of the best Python solutions to "<a href="http://www.spoj.com/problems/ANARC05B/">The Double Helix</a>" problem. <br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-wzk1jclGSXQ/UdAmerJssFI/AAAAAAAABYk/pb3O4uzgCmk/s1280/SPOJ+Top+20.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-wzk1jclGSXQ/UdAmerJssFI/AAAAAAAABYk/pb3O4uzgCmk/s1280/SPOJ+Top+20.png" style="max-width: 100%; max-height: 100%;" /></a></div></div></div>
]]></content>
  </entry>
  
</feed>
